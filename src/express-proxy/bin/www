#!/usr/bin/env node

/**
 * Module dependencies.
 */

var fs = require( 'fs' );
var app = require( '../app' );
var http = require( 'http' );
var logger = require( '../server/logging' );

if ( typeof(PhusionPassenger) !== 'undefined' ) {
    PhusionPassenger.configure( { autoInstall: false } );
}

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort( process.env.EXPRESS_PORT || '3000' );
app.set( 'port', port );

/**
 * Create server.
 */
var server = http.createServer( app );

/**
 * Listen on provided port, on all network interfaces.
 */
if ( typeof(PhusionPassenger) !== 'undefined' ) {
    server.listen( 'passenger' );
}
else {
    server.listen( port, function() {
        logger.info( 'Listening on %s:%d in %s mode (http)',
            this.address().address, this.address().port, app.settings.env );
    } );
}
server.on( 'error', onError );

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort( val ) {
    var port = parseInt( val, 10 );

    if ( isNaN( port ) ) {
        // named pipe
        return val;
    }

    if ( port >= 0 ) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError( error ) {
    if ( error.syscall !== 'listen' ) {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch ( error.code ) {
        case 'EACCES':
            logger.error( bind + ' requires elevated privileges' );
            process.exit( 1 );
            break;
        case 'EADDRINUSE':
            logger.error( bind + ' is already in use' );
            process.exit( 1 );
            break;
        default:
            throw error;
    }
}
